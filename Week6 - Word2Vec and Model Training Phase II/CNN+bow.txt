
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.metrics import (
    accuracy_score,
    balanced_accuracy_score,
    classification_report,
    confusion_matrix,
    precision_recall_curve,
    roc_auc_score,
    roc_curve,
    average_precision_score
)
from sklearn.model_selection import cross_val_predict, train_test_split
from sklearn.preprocessing import RobustScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout, Input
from sklearn.base import BaseEstimator, ClassifierMixin

project_root = "D:\\夏夏\\pythonProject7"
random_state = 42
test_size = 0.1

# Load the data
df = pd.read_csv(
    os.path.join(project_root, "features_bow_labels.csv")
)

# Check the columns to ensure the DataFrame structure
print(df.columns)

# Prepare features and labels
X = df.drop(columns=["Label"])
y = df["Label"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)

# Feature preprocessor
scaler = RobustScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Add an extra dimension to use Conv1D
X_train_scaled = X_train_scaled.reshape((X_train_scaled.shape[0], X_train_scaled.shape[1], 1))
X_test_scaled = X_test_scaled.reshape((X_test_scaled.shape[0], X_test_scaled.shape[1], 1))

# Define the CNN model
def create_cnn_model(input_shape):
    model = Sequential()
    model.add(Input(shape=input_shape))
    model.add(Conv1D(32, kernel_size=3, activation='relu'))
    model.add(MaxPooling1D(pool_size=2))
    model.add(Dropout(0.5))
    model.add(Conv1D(64, kernel_size=3, activation='relu'))
    model.add(MaxPooling1D(pool_size=2))
    model.add(Dropout(0.5))
    model.add(Flatten())
    model.add(Dense(100, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Custom Keras wrapper
class KerasClassifier(BaseEstimator, ClassifierMixin):
    def __init__(self, build_fn, input_shape, epochs=20, batch_size=32, verbose=0):
        self.build_fn = build_fn
        self.input_shape = input_shape
        self.epochs = epochs
        self.batch_size = batch_size
        self.verbose = verbose
        self.model_ = None

    def fit(self, X, y):
        self.model_ = self.build_fn(self.input_shape)
        self.model_.fit(X, y, epochs=self.epochs, batch_size=self.batch_size, verbose=self.verbose)
        return self

    def predict(self, X):
        pred_proba = self.model_.predict(X)
        return (pred_proba > 0.5).astype("int32")

    def predict_proba(self, X):
        return self.model_.predict(X)


input_shape = (X_train_scaled.shape[1], X_train_scaled.shape[2])
cnn_model = KerasClassifier(build_fn=create_cnn_model, input_shape=input_shape, epochs=20, batch_size=32, verbose=0)

# Fit the model
cnn_model.fit(X_train_scaled, y_train)


# Evaluate the model
def evaluate_model(model, X, y):
    y_scores = model.predict_proba(X)
    y_pred = (y_scores > 0.5).astype(int)
    print("Classification Report:")
    print(classification_report(y, y_pred))
    print("Confusion Matrix:")
    print(confusion_matrix(y, y_pred))
    accuracy = accuracy_score(y, y_pred)
    balanced_accuracy = balanced_accuracy_score(y, y_pred)
    print(f"Accuracy: {accuracy:.2f}")
    print(f"Balanced Accuracy: {balanced_accuracy:.2f}")
    roc_auc = roc_auc_score(y, y_scores)
    print(f"ROC-AUC Score: {roc_auc:.2f}")
    average_precision = average_precision_score(y, y_scores)
    print(f"Average Precision-Recall Score: {average_precision:.2f}")
    precision, recall, _ = precision_recall_curve(y, y_scores)
    plt.figure()
    plt.plot(recall, precision, label=f'Precision-Recall curve (area = {average_precision:.2f})')
    plt.xlabel('Recall')
    plt.ylabel('Precision')
    plt.ylim([0.0, 1.05])
    plt.xlim([0.0, 1.0])
    plt.title('Precision-Recall Curve')
    plt.legend(loc="upper right")
    plt.show()
    fpr, tpr, _ = roc_curve(y, y_scores)
    plt.figure()
    plt.plot(fpr, tpr, label=f'ROC curve (area = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve')
    plt.legend(loc="lower right")
    plt.show()


evaluate_model(cnn_model, X_train_scaled, y_train)
evaluate_model(cnn_model, X_test_scaled, y_test)
